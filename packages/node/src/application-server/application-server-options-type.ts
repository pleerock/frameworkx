import {
  AnyValidationRule,
  AppResolverType,
  Logger,
  MixedList,
  ValidationFn,
} from "@microframework/core"
import { CorsOptions } from "cors"
import { OptionsData } from "express-graphql"
import { PubSubEngine } from "graphql-subscriptions"
import { ServerOptions } from "subscriptions-transport-ws"
import { Connection, ConnectionOptions, EntitySchema } from "typeorm"
import { ErrorHandler } from "../error-handler"
import { NamingStrategy } from "../naming-strategy"
import { RateLimitItemOptions, RateLimitOptions } from "../rate-limit"

/**
 * Application server startup options.
 */
export type ApplicationServerOptions = {
  /**
   * File path to application declaration file.
   * Provided path should not contain an extension.
   * In the JavaScript runtime must point to .d.ts file
   * or .json file with the generated metadata.
   */
  appPath: string

  /**
   * Express server options.
   */
  webserver: {
    /**
     * Port on which to run express server.
     */
    port: number

    /**
     * Indicates if CORS should be enabled or not.
     * You can pass CORS options to configure how CORS are going to work.
     *
     * @see https://github.com/expressjs/cors
     */
    cors?: boolean | CorsOptions

    /**
     * Indicates if cookie-parser should be enabled or not.
     * You can pass cookie-parser options to configure how middleware must work.
     *
     * @see https://github.com/expressjs/cookie-parser
     */
    cookieParser?:
      | boolean
      | {
          secret?: string | string[]
          decode?(val: string): string
        }

    /**
     * List of middlewares to register in the app per each route / action.
     *
     * @see https://expressjs.com/en/starter/static-files.html
     */
    staticDirs?: {
      [route: string]: string
    }

    /**
     * List of registered app middlewares.
     */
    middlewares?: any[]

    /**
     * List of middlewares to register per specific route / action.
     */
    actionMiddleware?: { [key: string]: any[] }

    /**
     * Custom express server instance.
     * You can create and configure your own instance of express and framework will use it.
     * If not passed, default express server will be used.
     */
    express?: any
  }

  /**
   * Options to setup a GraphQL.
   */
  graphql?: {
    /**
     * route on which to register a GraphQL request handler.
     * If not set, default is "/graphql".
     */
    route?: string

    /**
     * Indicates if GraphiQL should be enabled or not.
     *
     * @see https://github.com/graphql/graphiql
     */
    graphiql?: boolean

    /**
     * Indicates if playground should be enabled or not.
     *
     * @see https://github.com/graphql/graphql-playground
     */
    playground?: boolean

    /**
     * Additional GraphQL options when GraphQL middleware is created.
     *
     * @see https://github.com/graphql/express-graphql#options
     */
    options?: Partial<OptionsData>
  }

  /**
   * Can be set to use a WebSocket server.
   */
  websocket?: {
    /**
     * WebSocket host.
     * For example, "localhost".
     */
    host: string

    /**
     * Port on which to run websocket server.
     */
    port: number

    /**
     * Route on which to register subscriptions websocket interface.
     * If not set, default is "/subscriptions".
     */
    path?: string

    /**
     * Additional websocket server options.
     */
    options?: Partial<ServerOptions>

    /**
     * PubSub to be used for subscriptions.
     */
    pubSub?: PubSubEngine

    /**
     * When a connected user doesn't respond in a given time,
     * he will be disconnected from a websocket.
     * Server and client must exchange with "ping"/"pong" messages.
     *
     * @see https://github.com/websockets/ws#how-to-detect-and-close-broken-connections
     */
    disconnectTimeout?: number

    /**
     * Custom websocket to use.
     */
    websocketServer?: any
  }

  /**
   * Swagger settings.
   */
  swagger?: {
    /**
     * Route on which to register api documentation.
     */
    route: string

    /**
     * Swagger document (e.g. use document: require("./swagger.json")).
     * This document will be merged into the document automatically generated by a framework.
     */
    document?: string

    /**
     * Swagger-ui-express options.
     *
     * @see https://github.com/scottie1984/swagger-ui-express#custom-swagger-options
     */
    options?: any
  }

  /**
   * ORM data source (connection) used in the application.
   */
  dataSource?:
    | Connection
    | ((options: Partial<ConnectionOptions>) => Promise<Connection>)

  /**
   * List of entities to use in connection.
   * If this property set, they will be overridden in ORM.
   */
  entities?: MixedList<Function | string | EntitySchema>

  /**
   * List of resolvers to register in the app server.
   */
  resolvers: MixedList<AppResolverType>

  /**
   * List of validation rules to apply.
   */
  validationRules?: MixedList<AnyValidationRule>

  /**
   * Validation library to be used in the application.
   * If not specified, default validator will be used.
   */
  validator?: ValidationFn<any>

  /**
   * Logger to be used in the application.
   * If not specified, default logger will be used.
   */
  logger?: Logger

  /**
   * Strategy for naming special identifiers used in the framework.
   * If not specified, default naming strategy will be used.
   */
  namingStrategy?: NamingStrategy

  /**
   * Handling errors logic.
   * If not specified, default error handler will be used.
   */
  errorHandler?: ErrorHandler

  /**
   * Indicates if framework should automatically generate root queries and mutations for your models.
   */
  generateModelRootQueries?: boolean

  /**
   * Maximal deepness for nested conditions of automatically generated queries.
   */
  maxGeneratedConditionsDeepness?: number

  /**
   * Rate limiting options.
   */
  rateLimits?: RateLimitOptions<any>

  /**
   * Used to create a rate limiter instance.
   */
  rateLimitConstructor?: (options: RateLimitItemOptions) => any
}
